:textile
  h3. Getting started
  
  We'll start with a simple tutorial to test-drive some code using "Node.js":http://nodejs.org/.
  Let's create a directory structure to host our new project:
  
  <pre>    project/
          source/
          test/
              specs/
              run.js
          vendor/
              jsclass/
                  core.js
                  package.js
                  test.js
                  (etc)</pre>
  
  @JS.Test@ does not require any particular project layout, but I tend to lay
  out my files like this. Our @source@ directory contains the source code for
  the project we're building. The @test/specs@ directory contains a spec file
  for each source file; this is where we'll be writing our tests. Finally,
  @test/run.js@ is the script we'll run from the command line or load into a
  browser; its job is to load up all our code and tests and run the test suite.
  
  Let's add some code to @run.js@. We need to load the JS.Class framework, tell
  it where to find our tests, then run the test suite.
  
  <pre class="prettyprint">    // test/run.js
      
      JSCLASS_PATH = 'vendor/jsclass';
      require('../' + JSCLASS_PATH + '/loader');

      JS.Packages(function() { with(this) {
          autoload(/.*Spec$/, {from: 'test/specs'});
      }});

      JS.require('JS.Test', function() {
          JS.require('UserSpec', JS.Test.method('autorun'));
      });</pre>
  
  That @autoload@ statement tells @JS.Packages@ it should look for any object
  whose name matches @/.*Spec$/@ in the @test/specs@ directory, for example
  @UserSpec@ should be in @test/specs/user_spec.js@. Finally we load @JS.Test@,
  then load our specs and use the @JS.Test.autorun()@ method to run them all.
  
  Let's try running it:
  
  <pre>    ~/project $ node test/run.js
      Error: Cannot find module 'test/specs/user_spec'</pre>
  
  We've not created the spec file yet, so Node is complaining. Create a
  blank file at that path, then run the tests again:
  
  <pre>    ~/project $ touch test/specs/user_spec.js
      ~/project $ node test/run.js
      Error: Expected package at test/specs/user_spec.js to define UserSpec</pre>
  
  This error happens because @test/specs/user_spec.js@ doesn't contain any
  code yet: the next step is to start writing this spec.
  
  h3. Writing specs
  
  Specs are organized using the nested context style popularized by RSpec.
  Contexts are delimited using the @describe@ method, and each test is created
  using the @it@ method. Within each context we can use @before@ and @after@
  hooks to set up and tear down any state the tests need. Assigning properties
  to @this@ in a @before@ block makes them appear as local variables in the
  tests.
  
  Let's write a simple spec for our @User@ class.
  
  <pre class="prettyprint">    // test/specs/user_spec.js
      
      JS.ENV.UserSpec = JS.Test.describe('User', function() { with(this) {
          before(function() { with(this) {
              this.user = new User('James');
          }});

          it('has a name', function() { with(this) {
              assertEqual('James', user.getName());
          })};
      }});</pre>
  
  We need to make @UserSpec@ a global variable so that @JS.Packages@ can find
  it. Accessing the global scope requires different code on different platforms,
  but you can use @JS.ENV@ to refer to it across all platforms.
  
  If we run the test again we start to get meaningful output:
  
  <pre>    ~/project $ node test/run.js 
      Loaded suite User
      Started
      EE
      Finished in 0.032 seconds.

      1) Error:
      test: User has a name:
      ReferenceError: User is not defined

      2) Error:
      test: User has a name:
      ReferenceError: user is not defined

      1 tests, 0 assertions, 0 failures, 2 errors</pre>
  
  We've got two errors, one from the before block because the @User@ class
  doesn't exist, and one from the test because the @user@ variable was never
  created. To fix this, we need to create the class, and tell @JS.Packages@
  where to find it. Add this code to @source/user.js@:
  
  <pre class="prettyprint">    // source/user.js
      JS.ENV.User = new JS.Class('User');</pre>
  
  Change @test/run.js@ to say that @UserSpec@ requires @User@, and tell
  it where to find the @User@ class:
  
  <pre class="prettyprint">    // test/run.js
      
      JS.Packages(function() { with(this) {
          autoload(/^(.*)Spec$/, {from: 'test/specs', require: '$1'});
          
          file('source/user.js')
              .provides('User')
              .requires('JS.Class');
      }});</pre>
  
  Let's run our tests again:
  
  <pre>    ~/project $ node test/run.js
      Loaded suite User
      Started
      E
      Finished in 0.035 seconds.

      1) Error:
      test: User has a name:
      TypeError: Object #<User:4d28a88f> has no method 'getName'

      1 tests, 0 assertions, 0 failures, 1 errors</pre>
  
  Just one error this time: our class doesn't have the method we're testing.
  Let's finish writing our class so it passes the tests:
  
  <pre class="prettyprint">    // source/user.js
      
      JS.ENV.User = new JS.Class('User', {
          initialize: function(name) {
              this._name = name;
          },

          getName: function() {
              return this._name;
          }
      });</pre>
  
  One last test run:
  
  <pre>    ~/project $ node test/run.js 
      Loaded suite User
      Started
      .
      Finished in 0.038 seconds.

      1 tests, 1 assertions, 0 failures, 0 errors</pre>
  
  Finally we've got a passing test. We can continue adding tests like this to
  build up our project. See the list of assertions below; they offer a rich set
  of tests to verify the behaviour of your code.
  
  h3. Running on other platforms
  
  So far we've been running our tests with Node. But what happens if we run them
  with another tool, say "Rhino":http://www.mozilla.org/rhino/?
  
  <pre>    ~/project $ rhino test/run.js 
      js: uncaught JavaScript runtime exception:
      ReferenceError: "require" is not defined.</pre>
  
  Rhino (and other shells like V8 and SpiderMonkey) don't support the @require()@
  function to load files, they use @load()@. Let's change @test/run.js@ to
  accommodate this:
  
  <pre class="prettyprint">    // test/run.js
      
      if (typeof require === 'function') {
          require('../' + JSCLASS_PATH + '/loader');
      } else {
          load(JSCLASS_PATH + '/loader.js');
      }</pre>
  
  Now you should be able to run the tests on Rhino, V8, SpiderMonkey, Narwhal
  and Node. You don't need to change any other code; @JS.require()@ works across
  platforms so you only need to change the code that loads JS.Class initially.
  
  However, some platforms such as RingoJS don't add variables assigned without
  @var@ to the global scope. @JSCLASS_PATH@ must be a global variable but we
  don't yet have @JS.ENV@ loaded to help us out. If you want to run on these
  platforms, change your @JSCLASS_PATH@ line to the following:
  
  <pre class="prettyprint">    // test/run.js
      
      (function() {
          var $ = (typeof this.global === 'object') ? this.global : this;
          $.JSCLASS_PATH = 'vendor/jsclass';
      })();</pre>
  
  Your tests will now run a wide range of server-side platforms, but not on
  Windows Script Host. If you need to support this platform, you need to define
  a @load()@ function before doing anything else. Your final @test/run.js@ file
  will look like this, at which point it will run on all supported platforms:
  
  <pre class="prettyprint">    // test/run.js
      
      if (this.ActiveXObject)
          load = function(path) {
              var fso = new ActiveXObject('Scripting.FileSystemObject'),
                  file, runner;
              
              try {
                  file   = fso.OpenTextFile(path);
                  runner = function() { eval(file.ReadAll()) };
                  runner();
              } finally {
                  try { if (file) file.Close() } catch (e) {}
              }
          };

      (function() {
          var $ = (typeof this.global === 'object') ? this.global : this;
          $.JSCLASS_PATH = 'vendor/jsclass';
      })();

      if (typeof require === 'function') {
          require('../' + JSCLASS_PATH + '/loader');
      } else {
          load(JSCLASS_PATH + '/loader.js');
      }

      JS.Packages(function() { with(this) {
          autoload(/^(.*)Spec$/, {from: 'test/specs', require: '$1'});
          file('source/user.js').provides('User');
      }});

      JS.require('JS.Test', function() {
          JS.require('UserSpec', JS.Test.method('autorun'));
      });</pre>
  
  h3. Running in the browser
  
  To run our tests in a web browser we need a web page to host the tests, and we
  need to separate the test-running code from the server-side framework-loading
  code. Take the platform-dependent code out of @test/run.js@ and put it in
  @test/console.js@. We're also going to add a constant called @CWD@ (for
  'current working directory') since browsers have no concept of a working
  directory and we need to specify where the root of the project is relative to
  the test page.
  
  You should have two files that look like this:
  
  <pre class="prettyprint">    // test/console.js
      
      // ... WSH load() function if necessary ...
      
      (function() {
          var $ = (typeof this.global === 'object') ? this.global : this;
          $.JSCLASS_PATH = 'vendor/jsclass';
      })();

      if (typeof require === 'function') {
          require('../' + JSCLASS_PATH + '/loader');
          require('./run');
      } else {
          load(JSCLASS_PATH + '/loader.js');
          load('test/run.js');
      }</pre>
  
  <pre class="prettyprint">    // test/run.js
      
      var CWD = (typeof CWD === 'undefined') ? '.' : CWD;
      
      JS.Packages(function() { with(this) {
          autoload(/^(.*)Spec$/, {from: CWD + '/test/specs', require: '$1'});
          file(CWD + '/source/user.js').provides('User');
      }});

      JS.require('JS.Test', function() {
          JS.require('UserSpec', JS.Test.method('autorun'));
      });</pre>
  
  You should still be able to run the tests using @node test/console.js@ in the
  terminal. Now we just set up a web page that does the same job as
  @test/console.js@, but in the browser:
  
  <pre class="prettyprint">    <!-- test/browser.html -->
  
      <!doctype html>
      <html>
          <head>
              <meta http-equiv="Content-type" content="text/html; charset=utf-8">
              <title>Test runner</title>
          </head>
          <body>
              <script type="text/javascript">CWD = '..'</script>
              <script type="text/javascript" src="../vendor/jsclass/loader.js"></script>
              <script type="text/javascript" src="../test/run.js"></script>
          </body>
      </html></pre>
  
  Save this as @test/browser.html@ and open it in any browser to see the test
  results.
  
  When running in the browser, @JS.Test@ will automatically notify "TestSwarm":http://www.testswarm.com/
  if you're using it, so you can easily use @JS.Test@ for your continuous
  integration setup.
