:textile
  h3. Interfaces
  
  Though not found in Ruby, I've decided to include @Interface@ support in @JS.Class@. Interfaces
  are found in Java and can be very useful in JavaScript when used judiciously. The idea of an
  interface is that you create a set of method names with no implementations. You can then insist
  that objects/classes implement the named methods; if you require an object to have a certain
  set of methods, you can then throw an exception if it does not.
  
  To create an interface, just pass in an array of method names:
  
  <pre>
  var IntComparable = new JS.Interface([
    'compareTo', 'lt', 'lte', 'gt', 'gte', 'eq'
  ]);
  
  var IntStateMachine = new JS.Interface([
    'getInitialState', 'changeState'
  ]);</pre>
  
  You can then test any object to find out whether it implements the required interfaces:
  
  <pre>
  JS.Interface.ensure(someObject,
      IntComparable, IntStateMachine);</pre>
  
  @JS.Interface.ensure@ tests its first argument against all the supplied interfaces. If it fails
  one of the tests, an error is thrown that tells you the name of the first method found to be
  missing from the object.
  
  You can use the @implement@ directive when defining a class to make sure the class defines the
  required interfaces. Note that this only works if all the required methods are public instance
  methods and defined at the same time as the @implements@ directive. So, for example, this works
  (see "Mixins":/mixins.html for the @Comparable@ module):
  
  <pre>
  var IntComparable = new JS.Interface([
    'compareTo', 'lt', 'lte', 'gt', 'gte', 'eq'
  ]);
  
  var TodoItem = new JS.Class({implement: IntComparable,
    include: Comparable,
    compareTo: function() {}
  });</pre>
  
  But this will not, since @Comparable@ is included after the @implement@ check is made inside
  @JS.Class@:
  
  <pre>
  var TodoItem = new JS.Class({implement: IntComparable,
    compareTo: function() {}
  });
  
  TodoItem.include(Comparable);</pre>
  
  It is called @implement@ because @implements@ is a reserved word. If your class fails to implement
  the given interfaces, an error is thrown when trying to define it.