:textile
  h3. @JS.Enumerable@
  
  @JS.Enumerable@ is essentially a straight port of Ruby's "@Enumerable@":http://ruby-doc.org/core/classes/Enumerable.html module to JavaScript. Some
  of the methods have slightly different names in keeping with JavaScript conventions, but the
  underlying idea is this: the module provides methods usable by any class that represents
  collections or lists of things. The only stipulation is that your class must have a @forEach@
  method that calls a given function with each member of the collection in turn, with an index
  variable if desired. The @forEach@ function should also return an @Enumerator@, even if called
  without an iterator function - see the example below. More information on @Enumerator@ is given
  at the end of this page.
  
  Here's a simple class that stores some of its instance data in a list, just so you get the idea:
  
  <pre class="prettyprint">    var Collection = new JS.Class({
          include: JS.Enumerable,
          
          initialize: function() {
              this.list = [];
              for (var i = 0, n = arguments.length; i < n; i++)
                  this.list.push(arguments[i]);
          },
          
          forEach: function(block, context) {
              var enumtr = this.enumFor('forEach');
              if (!block) return enumtr;
              
              for (var i = 0, n = this.list.length; i < n; i++)
                  block.call(context || null, this.list[i], i);
              
              return enumtr;
          }
      });</pre>
  
  Let's create an instance and see what it does:
  
  <pre class="prettyprint">    var list = new Collection(3,7,4,8,2);
      list.forEach(function(x, i) {
          console.log(x, i);
      });
      
      // prints...
      //    3 0
      //    7 1
      //    4 2
      //    8 3
      //    2 4</pre>
  
  The API provided by the @Enumerable@ module to the @Collection@ class is as follows. In
  the argument list of each method, @block@ is a function and @context@ is an optional
  argument that sets the meaning of the keyword @this@ inside @block@.
  
  h3. @all(block, context)@
  
  Returns @true@ iff @block@ returns @true@ for every member of the collection. Aliased as @every()@.
  
  <pre class="prettyprint">    var list = new Collection(3,7,4,8,2);
      
      list.all(function(x) { return x > 5 });
      // -> false
      
      list.all(function(x) { return typeof x == 'number' });
      // -> true</pre>
  
  h3. @any(block, context)@
  
  Returns @true@ if @block@ returns @true@ for one or more members of the collection. Aliased as @some()@.
  
  <pre class="prettyprint">    var list = new Collection(3,7,4,8,2);
      
      list.any(function(x) { return x > 5 });
      // -> true
      
      list.any(function(x) { return typeof x == 'object' });
      // -> false</pre>
  
  h3. @collect(block, context)@
  
  Alias for @map()@.
  
  h3. @detect(block, context)@
  
  Alias for @find()@.
  
  h3. @entries()@
  
  Alias for @toArray()@.
  
  h3. @every(block, context)@
  
  Alias for @all()@.
  
  h3. @filter(block, context)@
  
  Alias for @select()@.
  
  h3. @find(block, context)@
  
  Returns the first member of the collection for which @block@ returns @true@. Aliased as @detect()@.
  
  <pre class="prettyprint">    new Collection(3,7,4,8,2).find(function(x) { return x > 5 });
      // -> 7</pre>
  
  h3. @findAll(block, context)@
  
  Alias for @select()@.
  
  h3. @forEachCons(n, block, context)@
  
  Calls @block@ with every set of @n@ consecutive members of the collection.
  
  <pre class="prettyprint">    new Collection(3,7,4,8,2).forEachCons(3, function(list) {
          console.log(list);
      });
      
      // prints
      //    [3, 7, 4]
      //    [7, 4, 8]
      //    [4, 8, 2]</pre>
  
  h3. @forEachSlice(n, block, context)@
  
  Splits the collection up into pieces of length @n@, and call @block@ with each
  piece in turn.
  
  <pre class="prettyprint">    new Collection(3,7,4,8,2).forEachSlice(2, function(list) {
          console.log(list);
      });
      
      // prints
      //    [3, 7]
      //    [4, 8]
      //    [2]</pre>
  
  h3. @inject(memo, block, context)@
  
  Returns the result of reducing the collection down to a single value using a callback
  function. The first time your @block@ is called, it is passed the value of @memo@ you
  specified. The return value of @block@ becomes the next value of @memo@.
  
  <pre class="prettyprint">    // sum the values
      new Collection(3,7,4,8,2).inject(0, function(memo, x) { return memo + x });
      // -> 24</pre>
  
  h3. @map(block, context)@
  
  Returns an @Array@ formed by calling @block@ on each member of the collection. Aliased as @collect()@.
  
  <pre class="prettyprint">    // square the numbers
      new Collection(3,7,4,8,2).map(function(x) { return x * x });
      // -> [9, 49, 16, 64, 4]</pre>
  
  h3. @max(block, context)@
  
  Returns the member of the collection with the maximum value. Members must use "@Comparable@":/comparable.html
  or be comparable using JavaScript's standard comparison operators. If a block is passed,
  it is used to sort the members. If no block is passed, a sensible default sort method
  is used.
  
  <pre class="prettyprint">    var list = new Collection(3,7,4,8,2);
      
      list.max()   // -> 8
  
      list.max(function(a,b) { return (a%7) - (b%7) });
      // -> 4</pre>
  
  h3. @member(needle)@
  
  Returns @true@ iff the collection contains any members equal to @needle@. Items are checked for
  equality (@==@) rather than identity (@===@).
  
  <pre class="prettyprint">    var list = new Collection(3,7,4,8,2);
      list.member('7')   // -> true
      list.member('foo') // -> false</pre>
  
  h3. @min(block, context)@
  
  Much like @max()@, except it returns the minimum value.
  
  h3. @partition(block, context)@
  
  Returns two arrays, one containing members for which @block@ returns @true@, the other
  containing those for which it returns @false@.
  
  <pre class="prettyprint">    new Collection(3,7,4,8,2).partition(function(x, i) { return x > i });
      // -> [ [3, 7, 4, 8], [2] ]</pre>
  
  h3. @select(block, context)@
  
  Returns a new @Array@ containing the members of the collection for which @block@ returns @true@.
  Aliased as @filter()@ and @findAll()@.
  
  <pre class="prettyprint">    new Collection(3,7,4,8,2).select(function(x) { return x > 5 });
      // -> [7, 8]</pre>
  
  h3. @reject(block, context)@
  
  Returns a new @Array@ containing the members of the collection for which @block@ returns @false@.
  
  <pre class="prettyprint">    new Collection(3,7,4,8,2).reject(function(x) { return x > 5 });
      // -> [3, 4, 2]</pre>
  
  h3. @some(block, context)@
  
  Alias for @any()@.
  
  h3. @sort(block, context)@
  
  Returns a new @Array@ containing the members of the collection in sort order. The members
  must either use "@Comparable@":/comparable.html or be comparable using JavaScript's
  standard comparison operators. If no @block@ is passed, a sensible default sort method
  is used, otherwise the block itself is used to perform sorting.
  
  <pre class="prettyprint">    var list = new Collection(3,7,4,8,2);
          
      list.sort()
      // -> [2, 3, 4, 7, 8]
      
      // sort by comparing values modulo 7
      list.sort(function(a,b) { return (a%7) - (b%7) });
      // -> [7, 8, 2, 3, 4]</pre>
  
  h3. @sortBy(block, context)@
  
  Returns a new @Array@ containing the members of the collection sorted according to the
  value that @block@ returns for them.
  
  <pre class="prettyprint">    // sort values modulo 7
      new Collection(3,7,4,8,2).sortBy(function(x) { return x % 7 });
      // -> [7, 8, 2, 3, 4]</pre>
  
  h3. @toArray()@
  
  Returns a new @Array@ containing the members of the collection. Aliased as @entries()@.
  
  h3. @zip(args, block, context)@
  
  This one is rather tricky to explain in words, so I'll just let the Ruby docs explain:
  
  Converts any arguments to arrays, then merges elements of collection with corresponding elements
  from each argument. This generates a sequence of n-element arrays, where n is one
  more that the count of arguments. If the size of any argument is less than the size of the
  collection, @null@ values are supplied. If a block is given, it is invoked for each output array,
  otherwise an array of arrays is returned.
  
  What this translates to in practise:
  
  <pre class="prettyprint">    new Collection(3,7,4,8,2).zip([1,9,3,6,4], [6,3,3]);
      // -> [ [3,1,6], [7,9,3], [4,3,3],
      //        [8,6,null], [2,4,null] ]
      
      new Collection(3,7,4,8,2).zip([1,9,3,6,4], function(list) {
          console.log(list)
      });
      
      // prints...
      //    [3, 1]
      //    [7, 9]
      //    [4, 3]
      //    [8, 6]
      //    [2, 4]</pre>
  
  
  h3. @Enumerator@
  
  Enumerators are objects that encapsulate individual iterations, generated using the
  @Kernel#enumFor@ method. A class may have several iteration methods, such as @forEach@,
  @forEachSlice@, @reverseForEach@ etc, and such methods return an @Enumerator@ to let
  you reuse the iteration as an @Enumerable@ object.
  
  An @Enumerator@ is generated using a target object, the name of the iteration method,
  and any arguments that preceed the iteration block. For example, here are some that are
  generated by the @Enumerable@ module:
  
  <pre class="prettyprint">    reverseForEach: function(block, context) {
          var enumtr = this.enumFor('reverseForEach');
          if (!block) return enumtr;
          // reverseForEach() implementation
          return enumtr;
      }
      
      forEachCons: function(n, block, context) {
          var enumtr = this.enumFor('forEachCons', n);
          if (!block) return enumtr;
          // forEachCons() implementation
          return enumtr;
      }</pre>
  
  These enumerators let you reuse the type of iteration implemented by the method as a
  first-class @Enumerable@ object with all the @Enumerable@ methods. For example:
  
  <pre class="prettyprint">    var list = new Collection(3,7,4,8,2);
      
      list.entries()
      // -> [3,7,4,8,2]
      
      list.reverseForEach().entries()
      // -> [2,8,4,7,3]
      
      list.forEachCons(3).entries()
      // -> [[3,7,4], [7,4,8], [4,8,2]]
      
      list.forEachCons(3).reverseForEach().entries()
      // -> [[4,8,2], [7,4,8], [3,7,4]]</pre>

