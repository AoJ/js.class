:textile
  h3. Class methods
  
  Class methods (which bear a similarity to static methods in Java) are methods that you
  call on classes themselves, rather than their instances. To add class methods to your
  class, wrap them up in an @extend@ block:
  
  <pre class="prettyprint">
  var User = new JS.Class({
    extend: {
      find: function(id) {
        // Return a User with id
      },
      create: function(name) {
        return new this(name);
      }
    },
    initialize: function(name) {
      this.username = name;
    }
  });</pre>
  
  Note that @extend@ (as defined above) will not become an instance method of the class. Within
  class methods, @this@ refers to the class itself - see the @create()@ method.
  
  <pre class="prettyprint">
  var james = User.create('James');
  james.username    // -> 'James'
  james.klass       // -> User</pre>
  
  When you create a subclass, it will inherit any class methods of its parent, and you can use
  @callSuper()@ too:
  
  <pre class="prettyprint">
  var LoudUser = new JS.Class(User, {
    extend: {
      create: function(name) {
        return this.callSuper(name.toUpperCase());
      }
    }
  });
  
  var me = LoudUser.create('James');
  me.username   // -> 'JAMES'
  me.klass      // -> LoudUser
  
  var you = LoudUser.find(24)   // inherited from User</pre>
  
  Note how @this@, even in @callSuper@ methods, always refers to the same thing as in the original
  method call. We get back a @LoudUser@, not a @User@.
