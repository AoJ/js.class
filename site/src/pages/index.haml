:textile
  @JS.Class@ is a library designed to facilitate object-oriented development in JavaScript. It
  implements Ruby's core object, module and class system and some of its metaprogramming facilities,
  giving you a powerful base to build well-structured OO programs.
  
  <pre class="prettyprint">    var Event = new JS.Class({
          include: JS.Observable,
          
          fire: function(data) {
              this.notifyObservers('fire', data);
          }
      });</pre>
  
  h3. Features
  
  @JS.Class@ is designed to make JavaScript behave like Ruby in terms of its OOP structures.
  To this end, it provides the following features:
  
  * Classes and modules with Ruby-compatible inheritance
  * Subclassing and mixins
  * Late-binding arguments-optional @super@ calls to parent classes and mixins
  * Singleton methods and eigenclasses
  * @included@, @extended@ and @inherited@ hooks
  * Method binding
  * Ports of various standard Ruby modules, including @Enumerable@, @Hash@, @Set@, @Observable@,
    @Comparable@, @Forwardable@
  
  Its inheritance system supports late-bound @super()@ calls to parent classes and modules,
  including calls from singleton methods. It has been designed to mimick Ruby as closely as
  possible, so if you know Ruby you should feel right at home.
  
  h3. Download version 2.1
  
  Version 2.1 builds on the 2.0 core and libraries and adds several new core features and
  packages. A quick tour of the new features:
  
  * New libraries: "@ConstantScope@":/constantscope.html, "@Hash@":/hash.html and
    "@HashSet@":/set.html, a much faster @Set@ implementation.
  * The "package manager":/packages.html has been improved with a new API, parallel downloading
    of files, and support for server-side environments such as SpiderMonkey, Rhino and V8. It
    also supports user-defined loader functions for transparent integration with Google and Yahoo!'s
    packaging systems.
  * The "@Enumerable@":/enumerable.html module has been updated with plenty of methods from
    Ruby 1.9, and now supports "enumerators":/enumerator.html, and @Symbol#to_proc@-like
    functionality whereby a string, "@MethodChain@":/methodchain.html or any object that implements
    @toFunction()@ can be used as an iterator.
  * The core object methods now live in "@Kernel@":/kernel.html, and we've added new methods:
    @tap()@, @equals()@, @hash()@ and @enumFor()@.
  * The "double inclusion problem":http://eigenclass.org/hiki/The+double+inclusion+problem
    is now fixed; no current Ruby implementation seems to support this properly.
  * Ancestor and method lookups are now cached so @callSuper@ runs about twice as fast.
  * Classes can be named to generate @displayName@ on methods for
    "use with the WebKit debugger":/debugging.html.
  
  <a href="/assets/JS.Class.2-1-1.zip" onclick="trackDownload('2.1.1')">Download JS.Class 2.1.1</a>
  
  Most code based on version 1.x will be compatible with this release, but there a few "issues
  to be aware of":/upgrade.html. If you have code you cannot update to 2.x at present, 1.6 is
  still available:
  
  <a href="/assets/JS.Class.1-6-3.zip" onclick="trackDownload('1.6.3')">Download JS.Class 1.6.3</a>
  
  h3. Acknowledgements
  
  @JS.Class@ was initially inspired by, and borrows ideas from, these open-source projects:
  
  * The "Prototype":http://prototypejs.org framework, &copy; 2005-2009 Sam Stephenson
  * Alex Arnell's "Inheritance":http://www.twologic.com/projects/inheritance/ library, &copy; 2006, Alex Arnell
  * "Base":http://dean.edwards.name/weblog/2006/03/base/, &copy; 2006-9, Dean Edwards
  
  The standard library has been influenced by techniques demonstrated in
  "Pro JavaScript Design Patterns":http://www.apress.com/book/view/9781590599082, and contains
  ports of a few standard Ruby modules.
  
  @JS.Class@ is &copy; 2007&ndash;2009 James Coglan. You can find update announcements via
  "my blog":http://blog.jcoglan.com/category/jsclass/. The source code is "hosted on
  Github":http://github.com/jcoglan/js.class.
