:textile
  h3. Patterns
  
  The @class.js@ file defines @JS.Class@, @JS.Interface@, @JS.Module@ and @JS.Singleton@; generic
  components to help you build specific functionality. The other files in the download implement a number of
  commonly used design patterns and reusable components that provide pre-built solutions to common coding
  problems.
  
  JavaScript's power and flexibility allow parts of the implementation of some design patterns to be
  automated. The design pattern implementations presented here allow you to use design patterns to
  create robust code, letting you focus on your specific problem rather on on the details of the pattern
  you are using.
  
  The components and patterns provided by @JS.Class@ are listed in the sidebar. They all provide
  some concrete implementation for solving specific problems, which is what sets them apart
  from the @class.js@ components. The files contained in the download are as follows:
  
  * @command.js@ - defines @JS.Command@ and @JS.Command.Stack@
  * @comparable.js@ - defines @JS.Comparable@
  * @decorator.js@ - defines @JS.Decorator@
  * @enumerable.js@ - defines @JS.Enumerable@
  * @forwardable.js@ - defines @JS.Forwardable@
  * @linked_list.js@ - defines @JS.LinkedList.Doubly.Circular@
  * @method_chain.js@ - defines @JS.MethodChain@
  * @observable.js@ - defines @JS.Observable@
  * @proxy.js@ - defines @JS.Proxy.Virtual@
  * @ruby.js@ - defines @JS.Ruby@, a Ruby-like DSL for writing classes 
  * @state.js@ - defines @JS.State@